# -*- coding: utf-8 -*-
"""ai4021-hw1-1-python-tutorial-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/AmirianAlireza/4ffa32ad7c86ad57fe2023a733c60a90/ai4021-hw1-1-python-tutorial-1.ipynb

**Question 1:** Write a Python program that asks the user for their age. If the age is greater than or equal to 18, print "You are an adult." Otherwise, print "You are a minor."
"""

age=int(input("Enter your age:"))
if age>=18 :
  print("You are an adult")
else:
  print("You are a minor")

"""**Question 2:** Write a Python program to print the numbers from 1 to 10 using a for loop."""

for number in range(1, 11):
    print(number)

"""**Question 3:** Write a Python program to calculate the sum of all even numbers from 1 to 20 using a while loop."""

sum=0
num=0
while num<=20:
  sum=sum+num
  num=num+2
print(sum)

"""**Question 4:** Define a function called multiply that takes two parameters and returns their product."""

def multiply(a,b):
  c=a*b
  return c

"""**Question 5:** Create a class called Person with a constructor method that initializes the name and age attributes. Then, create an instance of the Person class and print the person's name and age."""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


person = Person("Alireza Amirian", 21)
print("Person's Name:", person.name)
print("Person's Age:", person.age)

"""**Question 6:** Create a subclass called `Student` that inherits from the `Person` class. Add an additional attribute called `student_id` to the `Student` class. Create an instance of the `Student` class and print the student's name, age, and student ID."""

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
student = Student("Alireza Amirian", 21, "9924133")
print("Student's Name:", student.name)
print("Student's Age:", student.age)
print("Student ID:", student.student_id)

"""**Question 7:** Write a Python program that prompts the user to enter a number and then prints whether the number is prime or not. Create a function called `is_prime` that takes an integer as an argument and returns True if it's prime, and False otherwise."""

def is_prime(x):
    if x <= 1:
        return False
    if x <= 3:
        return True
    if x % 2 == 0 or x % 3 == 0:
        return False
    i = 5
    while i*i <= x:
        if x % i == 0:
            return False
        i += 1
    return True

user_input = input("Enter a number: ")

if user_input.isdigit():
     x= int(user_input)
    if is_prime(x):
        print(f"{x} is a prime number.")
    else:
        print(f"{x} is not a prime number.")
else:
    print("Invalid input. Please enter a valid integer.")

"""**Question 8:** Write a Python program that calculates the factorial of a given number using a recursive function. Prompt the user for an integer input and print its factorial."""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

while True:
    user_input = input("Enter a non-negative integer: ")

    if user_input.isdigit():
        y = int(user_input)
        if y >= 0:
            result = factorial(y)
            print(f"The factorial of {y} is {result}")
            break
        else:
            print("Factorial is not defined for negative numbers.")
    else:
        print("Invalid input. Please enter a valid non-negative integer.")

"""**Question 9:** Create a class called `Rectangle` with attributes `width` and `height`. Add a method `calculate_area` that calculates and returns the area of the rectangle. Create an instance of the `Rectangle` class and print its area."""

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height

rectangle = Rectangle(5, 8)

area = rectangle.calculate_area()
print(f"The area of the rectangle is {area} square units.")

"""**Question 10:** Create a subclass called `Square` that inherits from the `Rectangle` class. Add a method `calculate_perimeter` to the `Square` class that calculates and returns the perimeter of the square. Create an instance of the `Square` class and print its perimeter."""

class Square(Rectangle):
    def __init__(self, side_length):

        super().__init__(side_length, side_length)

    def calculate_perimeter(self):
        return 4 * self.width

square = Square(4)


perimeter = square.calculate_perimeter()
print(f"The perimeter of the square is {perimeter} units.")

"""**Question 11:** Create a base class called `Animal` with attributes `name` and `species`. Provide a constructor to initialize these attributes and a method called `speak` that prints a generic message like "The animal makes a sound."
"""

class Animal:
    def __init__(self, name, species):
        self.name = name
        self.species = species

    def speak(self):
        print("The animal makes a sound.")

animal = Animal("Leo", "Lion")

animal.speak()

"""**Question 12:** Create a subclass called `Dog` that inherits from the `Animal` class. Add a constructor to initialize the `name`, `species`, and `breed` attributes specific to dogs. Override the `speak` method in the `Dog` class to print "Woof!"
"""

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name, species="Dog")
        self.breed = breed

    def speak(self):
        print(f"{self.name} the {self.breed} says Woof!")

dog = Dog("Buddy", "chihuahua")

dog.speak()

"""**Question 13:** Create another subclass called `Cat` that inherits from the `Animal` class. Add a constructor to initialize the `name`, `species`, and `color` attributes specific to cats. Override the `speak` method in the `Cat` class to print "Meow!"
"""

class Cat(Animal):
    def __init__(self, name, color):
        super().__init__(name, species="Cat")
        self.color = color

    def speak(self):
        print(f"{self.name} the {self.color} cat says Meow!")

cat = Cat("Whiskers", "Gray")

cat.speak()

"""**Question 14:** Create instances of both the `Dog` and `Cat` classes and call their `speak` methods to demonstrate polymorphism."""

class Animal:
    def __init__(self, name, species):
        self.name = name
        self.species = species

    def speak(self):
        print("The animal makes a sound.")

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name, species="Dog")
        self.breed = breed

    def speak(self):
        print(f"{self.name} the {self.breed} says Woof!")

class Cat(Animal):
    def __init__(self, name, color):
        super().__init__(name, species="Cat")
        self.color = color

    def speak(self):
        print(f"{self.name} the {self.color} cat says Meow!")

dog = Dog("Buddy", "chihuahua")
cat = Cat("Whiskers", "Gray")

dog.speak()
cat.speak()